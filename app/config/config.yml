imports:
    - { resource: parameters.yml }
    - { resource: security.yml }
    - { resource: services.yml }
    - { resource: "@CmsBundle/Resources/config/services.yml" }
    - { resource: "@AdminBundle/Resources/config/services.yml" }


# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: cs

framework:
    #esi: ~
    translator: { fallbacks: ['%locale%'] }
    secret: '%secret%'
    router:
        resource: '%kernel.project_dir%/app/config/routing.yml'
        strict_requirements: ~
    form: ~
    csrf_protection: ~
    validation: { enable_annotations: true }
    #serializer: { enable_annotations: true }
    templating:
        engines: ['twig']
    default_locale: '%locale%'
    trusted_hosts: ~
    session:
        # https://symfony.com/doc/current/reference/configuration/framework.html#handler-id
        handler_id: session.handler.native_file
        save_path: '%kernel.project_dir%/var/sessions/%kernel.environment%'
    fragments: ~
    http_method_override: true
    assets: ~
    php_errors:
        log: true

# Twig Configuration
twig:
    debug: '%kernel.debug%'
    strict_variables: '%kernel.debug%'
    form_themes:
      - bootstrap_3_layout.html.twig
    globals:
        widgets: '@cms.variables.widgets'

# Doctrine Configuration
doctrine:
    dbal:
        driver: pdo_mysql
        host: '%database_host%'
        port: '%database_port%'
        dbname: '%database_name%'
        user: '%database_user%'
        password: '%database_password%'
        charset: UTF8
        # if using pdo_sqlite as your database driver:
        #   1. add the path in parameters.yml
        #     e.g. database_path: "%kernel.project_dir%/var/data/data.sqlite"
        #   2. Uncomment database_path in parameters.yml.dist
        #   3. Uncomment next line:
        #path: '%database_path%'

    orm:
        auto_generate_proxy_classes: '%kernel.debug%'
        naming_strategy: doctrine.orm.naming_strategy.underscore
        auto_mapping: true
#        entity_managers:
#            default:
#                mappings:
#                    FOSUserBundle: ~
#                    SonataUserBundle: ~

# Swiftmailer Configuration
swiftmailer:
    transport: '%mailer_transport%'
    host: '%mailer_host%'
    username: '%mailer_user%'
    password: '%mailer_password%'
    spool: { type: memory }

assetic:
    debug:          '%kernel.debug%'
    use_controller: '%kernel.debug%'
    filters:
        cssrewrite: ~
        less:
            node: '%node%'
            node_paths: ['%node_paths%']
            apply_to: '\.less$'

sonata_block:
    default_contexts: [cms]
    blocks:
        # enable the SonataAdminBundle block
        sonata.admin.block.admin_list:
            contexts: [admin]
        sonata.user.block.menu:    # used to display the menu in profile pages
        sonata.user.block.account: # used to display menu option (login option)
        sonata.block.service.text: # used to if you plan to use Sonata user routes

sonata_admin:
    title:      WEBCMS
    title_logo: images/webcms.png
    security:
        handler: sonata.admin.security.handler.role
    dashboard:
        groups:
            CMS:
                label:               "Správa obsahu"
                label_catalogue:      ~
                icon:            '<i class="fa fa-book"></i>'
                items:
                    - admin.cms.document_category
                    - admin.cms.document
                    - route:        cms_admin_filemanager
                      label:        Soubory

            sonata_user:
                label:           "Uživatelé"
                icon:            '<i class="fa fa-users"></i>'

sonata_user:
    security_acl:           false
    impersonating_route:    homepage # or any route you want to use

    table:
            user_group:     "fos_user_user_group"

    class:
        user:               AdminBundle\Entity\User
        group:              AdminBundle\Entity\UserGroup

    admin:                  # Admin Classes
        user:
            class:          Sonata\UserBundle\Admin\Entity\UserAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

        group:
            class:          Sonata\UserBundle\Admin\Entity\GroupAdmin
            controller:     SonataAdminBundle:CRUD
            translation:    SonataUserBundle

sonata_formatter:
    default_formatter: text
    formatters:
        markdown:
            service: sonata.formatter.text.markdown
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
        #        - sonata.media.formatter.twig #keep this commented unless you are using media bundle.


        text:
            service: sonata.formatter.text.text
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
        #        - sonata.media.formatter.twig


        rawhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
        #        - sonata.media.formatter.twig


        richhtml:
            service: sonata.formatter.text.raw
            extensions:
                - sonata.formatter.twig.control_flow
                - sonata.formatter.twig.gist
        #        - sonata.media.formatter.twig


        twig:
            service: sonata.formatter.text.twigengine
            extensions: [] # Twig formatter cannot have extensions

fos_user:
    db_driver: orm # other valid values are 'mongodb', 'couchdb' and 'propel'
    firewall_name: admin
    user_class:  AdminBundle\Entity\User

    group:
        group_class:   AdminBundle\Entity\UserGroup
        group_manager: sonata.user.orm.group_manager

    service:
        user_manager: sonata.user.orm.user_manager

    from_email:
            address: "%mailer_user%"
            sender_name: "%mailer_user%"


liip_imagine :
    resolvers :
        default :
            web_path : ~

    filter_sets :
        cache : ~
        # the name of the "filter set"
        cms_image_thumb:
            # adjust the image quality to 75%
            quality : 85
            # list of transformations to apply (the "filters")
            filters :
                # create a thumbnail: set size to 120x90 and use the "outbound" mode
                # to crop the image when the size ratio of the input differs
                thumbnail  : { size : [500, 500], mode : inset }

                # create a 2px black border: center the thumbnail on a black background
                # 4px larger to create a 2px border around the final image
                # background : { size : [124, 94], position : center, color : '#000000' }

        cms_image_large:
            # adjust the image quality to 75%
            quality : 85
            # list of transformations to apply (the "filters")
            filters :
                 thumbnail  : { size : [1200, 1200], mode : inset }